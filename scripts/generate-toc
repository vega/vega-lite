#!/usr/bin/env node

import fs from 'fs';
import * as cheerio from 'cheerio';
import yamlFront from 'yaml-front-matter';

const URL = '{{site.baseurl}}/docs/';

const DIR = import.meta.dirname + '/../site/';
const DOCS_LAYOUT = DIR + '_layouts/docs.html';
const COMPILED_DOCS = DIR + '_site/docs';
const TOC = DIR + '_includes/docs_toc.md';

const CONTENT_TAG = '.page-content';
const INNER_LINK_TAG = 'h2';

const writeStream = fs.createWriteStream(TOC, {flags: 'w'}); // w flag means overwrite existing file

writeStream.write('[//]: # (Auto-generated by scripts/generate-toc)\r\n');

// generate markdown for list item
function generateListItem(content, buffer) {
  let indent = '';
  for (let i = 0; i < buffer; i++) {
    indent += '    ';
  }
  return `${indent}- ${content}`;
}

// generate markdown for anchor tag
function generateLink(title, page, local) {
  return `[${title}](${URL}${page}.html${local || ''})`;
}

// parse Docs layout
fs.readFile(DOCS_LAYOUT, function (err, contents) {
  if (err) {
    throw err;
  }

  const front = yamlFront.loadFront(contents.toString());
  const sidebar = front.sidebar; // docs sidebar, top level

  function parseSidebar(sidebar, depth) {
    for (const el of sidebar) {
      // skip break and table of contents itself
      if (!el.break && el.url !== 'toc') {
        const page = `${COMPILED_DOCS}/${el.url}.html`;

        // generate markdown for top level navigation
        const link = generateLink(el.text, el.url);
        const li = generateListItem(link, depth);
        writeStream.write(li + '\r\n');

        // build DOM
        const $ = cheerio.load(fs.readFileSync(page).toString());

        // iterate through links in DOM tree
        $(CONTENT_TAG + ' ' + INNER_LINK_TAG).each(function () {
          // generate markdown for in-page navigation
          const hash = '#' + $(this).attr('id');
          const link = generateLink($(this).text(), el.url, hash);
          const li = generateListItem(link, depth + 1);
          writeStream.write(li + '\r\n');
        });
      }

      // recurse if there is a sub-sidebar
      if (el['sub-sidebar'] !== undefined) {
        parseSidebar(el['sub-sidebar'], depth + 1);
      }
    }
  }

  // begin parse
  parseSidebar(sidebar, 0);
});
